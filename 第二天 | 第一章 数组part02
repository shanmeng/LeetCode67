
209.长度最小的子数组
题目建议： 本题关键在于理解滑动窗口

题目:  209.长度最小的子数组 Minimum Size Subarray Sum
Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

Example 1:
Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.

Example 2:
Input: target = 4, nums = [1,4,4]
Output: 1

Example 3:
Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0

Constraints:
1 <= target <= 109
1 <= nums.length <= 105
1 <= nums[i] <= 104
 
Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).

滑动窗口其实类似双指针, 只是我们取的是两个指针中间窗口的集合, 这个集合像一个正在滑动的窗口
滑动窗口: 
用一个for循环做两个for循环的事情, 最重要的问题是如何移动起始位置.
for循环里的for (j = 0, j < arraylength, j++), 这里的j是终止位置, 因为终止位置移动得快, 起始位置i根据终止位置形成的集合来决定何时移动i(如果里面所有元素大于target值,再移动起始位置i), i跟着j走, 所以for循环里的j得是终止位置.
讲解里是先确定了终止位置再移动起始位置. 其实也可以先确定起始位置再移动终止位置, 只是这样一来跟两个for循环的暴力解法比起来没有优势. 

第一次提交错误: 先i+=1了, 再window_sum -= nums[i], 自己画图的时候看岔了, 推演的时候直接缩的第二个元素, 应该从起始位置的元素开始缩.

==================================================================================================================

题目: 59. 螺旋矩阵 Spiral Matrix II

Given a positive integer n, generate an n x n matrix filled with elements from 1 to n^2 in spiral order.

Example 1:
Input: n = 3
Output: [[1,2,3],[8,9,4],[7,6,5]]

Example 2:
Input: n = 1
Output: [[1]]

Constraints:
1 <= n <= 20

本题并不涉及到什么算法，就是模拟过程，但却十分考察对代码的掌控能力。容易出错的原因是边界处理问题处理不好, 缠在一起不容易理清. 循环不变量原则, 不变量的意思是对每条边的处理规则不变, 比如左闭右开或者左开右闭, 总之遍历的时候对边对节点的处理规则不变.
关键的点是正方形的四个角

要遍历矩阵, 要解决两个问题:

1. 问: While 循环什么时候结束(转几圈)?  
   答: 转 n // 2 圈
2. 问: 如果n是奇数时, 转完圈之后最中间的那个值时多少?
   答: 中间值是n^2, 下标是a[n//2][n//2]


